// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createProductStmt, err = db.PrepareContext(ctx, createProduct); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProduct: %w", err)
	}
	if q.deleteProductStmt, err = db.PrepareContext(ctx, deleteProduct); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProduct: %w", err)
	}
	if q.getProductStmt, err = db.PrepareContext(ctx, getProduct); err != nil {
		return nil, fmt.Errorf("error preparing query GetProduct: %w", err)
	}
	if q.getProductCountStmt, err = db.PrepareContext(ctx, getProductCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductCount: %w", err)
	}
	if q.getProductCountByOwnerStmt, err = db.PrepareContext(ctx, getProductCountByOwner); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductCountByOwner: %w", err)
	}
	if q.getProductListStmt, err = db.PrepareContext(ctx, getProductList); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductList: %w", err)
	}
	if q.getProductListByOwnerStmt, err = db.PrepareContext(ctx, getProductListByOwner); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductListByOwner: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createProductStmt != nil {
		if cerr := q.createProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProductStmt: %w", cerr)
		}
	}
	if q.deleteProductStmt != nil {
		if cerr := q.deleteProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProductStmt: %w", cerr)
		}
	}
	if q.getProductStmt != nil {
		if cerr := q.getProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductStmt: %w", cerr)
		}
	}
	if q.getProductCountStmt != nil {
		if cerr := q.getProductCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductCountStmt: %w", cerr)
		}
	}
	if q.getProductCountByOwnerStmt != nil {
		if cerr := q.getProductCountByOwnerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductCountByOwnerStmt: %w", cerr)
		}
	}
	if q.getProductListStmt != nil {
		if cerr := q.getProductListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductListStmt: %w", cerr)
		}
	}
	if q.getProductListByOwnerStmt != nil {
		if cerr := q.getProductListByOwnerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductListByOwnerStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                         DBTX
	tx                         *sql.Tx
	createProductStmt          *sql.Stmt
	deleteProductStmt          *sql.Stmt
	getProductStmt             *sql.Stmt
	getProductCountStmt        *sql.Stmt
	getProductCountByOwnerStmt *sql.Stmt
	getProductListStmt         *sql.Stmt
	getProductListByOwnerStmt  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                         tx,
		tx:                         tx,
		createProductStmt:          q.createProductStmt,
		deleteProductStmt:          q.deleteProductStmt,
		getProductStmt:             q.getProductStmt,
		getProductCountStmt:        q.getProductCountStmt,
		getProductCountByOwnerStmt: q.getProductCountByOwnerStmt,
		getProductListStmt:         q.getProductListStmt,
		getProductListByOwnerStmt:  q.getProductListByOwnerStmt,
	}
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: products.sql

package db

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  shop_owner_name,
  pic_path,
  describe,
  price,
  quantity
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING product_id, shop_owner_name, pic_path, describe, price, quantity, create_time
`

type CreateProductParams struct {
	ShopOwnerName string `json:"shopOwnerName"`
	PicPath       string `json:"picPath"`
	Describe      string `json:"describe"`
	Price         int32  `json:"price"`
	Quantity      int32  `json:"quantity"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.queryRow(ctx, q.createProductStmt, createProduct,
		arg.ShopOwnerName,
		arg.PicPath,
		arg.Describe,
		arg.Price,
		arg.Quantity,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.ShopOwnerName,
		&i.PicPath,
		&i.Describe,
		&i.Price,
		&i.Quantity,
		&i.CreateTime,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE product_id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, productID int64) error {
	_, err := q.exec(ctx, q.deleteProductStmt, deleteProduct, productID)
	return err
}

const getProductCount = `-- name: GetProductCount :one
SELECT COUNT(*) FROM products
LIMIT 1
`

func (q *Queries) GetProductCount(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.getProductCountStmt, getProductCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getProductCountByOwner = `-- name: GetProductCountByOwner :one
SELECT COUNT(*) FROM products
WHERE shop_owner_name = $1 LIMIT 1
`

func (q *Queries) GetProductCountByOwner(ctx context.Context, shopOwnerName string) (int64, error) {
	row := q.queryRow(ctx, q.getProductCountByOwnerStmt, getProductCountByOwner, shopOwnerName)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getProductList = `-- name: GetProductList :many
SELECT product_id, describe, pic_path
FROM products
LIMIT $2::int
OFFSET (($1::int - 1) * $2::int)
`

type GetProductListParams struct {
	Page     int32 `json:"page"`
	Pagesize int32 `json:"pagesize"`
}

type GetProductListRow struct {
	ProductID int64  `json:"productId"`
	Describe  string `json:"describe"`
	PicPath   string `json:"picPath"`
}

func (q *Queries) GetProductList(ctx context.Context, arg GetProductListParams) ([]GetProductListRow, error) {
	rows, err := q.query(ctx, q.getProductListStmt, getProductList, arg.Page, arg.Pagesize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductListRow{}
	for rows.Next() {
		var i GetProductListRow
		if err := rows.Scan(&i.ProductID, &i.Describe, &i.PicPath); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductListByOwner = `-- name: GetProductListByOwner :many
SELECT product_id, describe, pic_path
FROM products
WHERE shop_owner_name = $1
LIMIT $3::int
OFFSET (($2::int - 1) * $3::int)
`

type GetProductListByOwnerParams struct {
	ShopOwnerName string `json:"shopOwnerName"`
	Page          int32  `json:"page"`
	Pagesize      int32  `json:"pagesize"`
}

type GetProductListByOwnerRow struct {
	ProductID int64  `json:"productId"`
	Describe  string `json:"describe"`
	PicPath   string `json:"picPath"`
}

func (q *Queries) GetProductListByOwner(ctx context.Context, arg GetProductListByOwnerParams) ([]GetProductListByOwnerRow, error) {
	rows, err := q.query(ctx, q.getProductListByOwnerStmt, getProductListByOwner, arg.ShopOwnerName, arg.Page, arg.Pagesize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductListByOwnerRow{}
	for rows.Next() {
		var i GetProductListByOwnerRow
		if err := rows.Scan(&i.ProductID, &i.Describe, &i.PicPath); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

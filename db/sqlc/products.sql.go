// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: products.sql

package db

import (
	"context"
	"time"
)

const createItem = `-- name: CreateItem :one
INSERT INTO products(
  shop_owner_id,
  pic_path,
  describe,
  price,
  quantity,
  create_time
  ) VALUES (
  $1, $2, $3, $4, $5, $6
  )
  RETURNING product_id, shop_owner_id, pic_path, describe, price, quantity, create_time
`

type CreateItemParams struct {
	ShopOwnerID int64     `json:"shopOwnerId"`
	PicPath     string    `json:"picPath"`
	Describe    string    `json:"describe"`
	Price       int32     `json:"price"`
	Quantity    int32     `json:"quantity"`
	CreateTime  time.Time `json:"createTime"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Product, error) {
	row := q.queryRow(ctx, q.createItemStmt, createItem,
		arg.ShopOwnerID,
		arg.PicPath,
		arg.Describe,
		arg.Price,
		arg.Quantity,
		arg.CreateTime,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.ShopOwnerID,
		&i.PicPath,
		&i.Describe,
		&i.Price,
		&i.Quantity,
		&i.CreateTime,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM products
WHERE product_id =$1
`

func (q *Queries) DeleteItem(ctx context.Context, productID int64) error {
	_, err := q.exec(ctx, q.deleteItemStmt, deleteItem, productID)
	return err
}

const getItem = `-- name: GetItem :one
SELECT product_id, shop_owner_id, pic_path, describe, price, quantity, create_time FROM products
WHERE product_id = $1 LIMIT 1
`

func (q *Queries) GetItem(ctx context.Context, productID int64) (Product, error) {
	row := q.queryRow(ctx, q.getItemStmt, getItem, productID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.ShopOwnerID,
		&i.PicPath,
		&i.Describe,
		&i.Price,
		&i.Quantity,
		&i.CreateTime,
	)
	return i, err
}

const getProductCount = `-- name: GetProductCount :one
SELECT COUNT(*)
FROM products LIMIT 1
`

func (q *Queries) GetProductCount(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.getProductCountStmt, getProductCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getProductCountByOwner = `-- name: GetProductCountByOwner :one
SELECT COUNT(*)
FROM products
WHERE shop_owner_id = $1 LIMIT 1
`

func (q *Queries) GetProductCountByOwner(ctx context.Context, shopOwnerID int64) (int64, error) {
	row := q.queryRow(ctx, q.getProductCountByOwnerStmt, getProductCountByOwner, shopOwnerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getProductList = `-- name: GetProductList :many
SELECT product_id, describe, pic_path
FROM products
LIMIT $2
OFFSET (($1 - 1) * $2)
`

type GetProductListParams struct {
	Column1 interface{} `json:"column1"`
	Limit   int32       `json:"limit"`
}

type GetProductListRow struct {
	ProductID int64  `json:"productId"`
	Describe  string `json:"describe"`
	PicPath   string `json:"picPath"`
}

func (q *Queries) GetProductList(ctx context.Context, arg GetProductListParams) ([]GetProductListRow, error) {
	rows, err := q.query(ctx, q.getProductListStmt, getProductList, arg.Column1, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductListRow{}
	for rows.Next() {
		var i GetProductListRow
		if err := rows.Scan(&i.ProductID, &i.Describe, &i.PicPath); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductListByOwner = `-- name: GetProductListByOwner :many
SELECT product_id, describe, pic_path
FROM products
WHERE shop_owner_id = $1
LIMIT $3
OFFSET (($2 - 1) * $3)
`

type GetProductListByOwnerParams struct {
	ShopOwnerID int64       `json:"shopOwnerId"`
	Column2     interface{} `json:"column2"`
	Limit       int32       `json:"limit"`
}

type GetProductListByOwnerRow struct {
	ProductID int64  `json:"productId"`
	Describe  string `json:"describe"`
	PicPath   string `json:"picPath"`
}

func (q *Queries) GetProductListByOwner(ctx context.Context, arg GetProductListByOwnerParams) ([]GetProductListByOwnerRow, error) {
	rows, err := q.query(ctx, q.getProductListByOwnerStmt, getProductListByOwner, arg.ShopOwnerID, arg.Column2, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductListByOwnerRow{}
	for rows.Next() {
		var i GetProductListByOwnerRow
		if err := rows.Scan(&i.ProductID, &i.Describe, &i.PicPath); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
